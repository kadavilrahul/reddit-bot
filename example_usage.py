#!/usr/bin/env python3
"""
Example usage scripts for Reddit Bot
Demonstrates various bot capabilities
"""
import json
import time
from datetime import datetime
from reddit_bot import RedditBot

def example_data_retrieval():
    """Example: Retrieve and analyze subreddit data"""
    print("="*60)
    print("EXAMPLE: DATA RETRIEVAL")
    print("="*60)
    
    bot = RedditBot()
    
    # Retrieve hot posts from r/technology
    print("üìä Retrieving data from r/technology...")
    data = bot.retrieve_subreddit_data(
        subreddit_name="technology",
        sort_by="hot",
        limit=15,
        include_comments=True
    )
    
    print(f"‚úÖ Retrieved {data['total_posts']} posts")
    print(f"üìà Summary: {json.dumps(data['summary'], indent=2)}")
    
    # Save data
    filename = bot.save_data_to_file(data, "technology_data.json")
    print(f"üíæ Data saved to: {filename}")

def example_auto_commenting():
    """Example: Automated commenting on posts"""
    print("="*60)
    print("EXAMPLE: AUTO-COMMENTING")
    print("="*60)
    
    bot = RedditBot()
    
    # Auto-comment on new posts in r/artificial
    print("ü§ñ Starting auto-commenting on r/artificial...")
    results = bot.auto_comment_on_posts(
        subreddit_name="artificial",
        max_comments=3,
        sort_by="new",
        min_score=5
    )
    
    # Display results
    successful = sum(1 for r in results if r['success'])
    print(f"‚úÖ Successfully posted {successful} comments")
    
    for result in results:
        status = "‚úÖ" if result['success'] else "‚ùå"
        print(f"{status} {result['post_title'][:50]}...")
        if not result['success']:
            print(f"   Error: {result['error']}")

def example_search_and_analysis():
    """Example: Search posts and analyze with AI"""
    print("="*60)
    print("EXAMPLE: SEARCH AND ANALYSIS")
    print("="*60)
    
    bot = RedditBot()
    
    # Search for AI-related posts
    print("üîç Searching for 'artificial intelligence' posts...")
    results = bot.search_and_analyze(
        query="artificial intelligence",
        subreddit_name="technology",
        limit=20
    )
    
    print(f"üìä Found {results['total_results']} posts")
    print(f"ü§ñ AI Analysis:\n{results['analysis']}")
    
    # Save results
    filename = bot.save_data_to_file(results, "ai_search_results.json")
    print(f"üíæ Results saved to: {filename}")

def example_keyword_monitoring():
    """Example: Monitor subreddit for keywords"""
    print("="*60)
    print("EXAMPLE: KEYWORD MONITORING")
    print("="*60)
    
    bot = RedditBot()
    
    # Monitor r/MachineLearning for specific keywords
    keywords = ["GPT", "transformer", "neural network", "deep learning"]
    
    print(f"üëÅÔ∏è Monitoring r/MachineLearning for keywords: {keywords}")
    print("‚è∞ Duration: 0.1 hours (6 minutes) for demo")
    
    results = bot.monitor_subreddit(
        subreddit_name="MachineLearning",
        keywords=keywords,
        action="log",  # Just log, don't comment for demo
        duration_hours=0.1  # 6 minutes for demo
    )
    
    print(f"üéØ Found {results['total_matches']} keyword matches")
    for match in results['matches']:
        print(f"   ‚Ä¢ '{match['keyword']}' in: {match['title'][:40]}...")

def example_custom_comment():
    """Example: Post a custom comment"""
    print("="*60)
    print("EXAMPLE: CUSTOM COMMENT")
    print("="*60)
    
    bot = RedditBot()
    
    # This is a demo - you would need a real post ID
    print("üìù This example shows how to post custom comments")
    print("üí° In practice, you would:")
    print("   1. Get a post ID from Reddit")
    print("   2. Either write a custom comment or generate one with AI")
    print("   3. Post it using the bot")
    
    # Example code (commented out to avoid actual posting):
    """
    result = bot.client.post_comment(
        post_id="your_post_id_here",
        comment_text="This is a thoughtful comment generated by AI!",
        validate=True
    )
    
    if result['success']:
        print(f"‚úÖ Comment posted: {result['permalink']}")
    else:
        print(f"‚ùå Failed: {result['error']}")
    """

def example_bot_statistics():
    """Example: Get bot statistics and user info"""
    print("="*60)
    print("EXAMPLE: BOT STATISTICS")
    print("="*60)
    
    bot = RedditBot()
    
    # Get bot performance stats
    stats = bot.get_bot_stats()
    print("ü§ñ Bot Statistics:")
    for key, value in stats.items():
        print(f"   ‚Ä¢ {key.replace('_', ' ').title()}: {value}")
    
    # Get Reddit user info
    try:
        user_info = bot.client.get_user_info()
        print("\nüë§ Reddit Account Info:")
        print(f"   ‚Ä¢ Username: {user_info['name']}")
        print(f"   ‚Ä¢ Comment Karma: {user_info['comment_karma']:,}")
        print(f"   ‚Ä¢ Link Karma: {user_info['link_karma']:,}")
        print(f"   ‚Ä¢ Total Karma: {user_info['total_karma']:,}")
        print(f"   ‚Ä¢ Verified Email: {user_info['has_verified_email']}")
    except Exception as e:
        print(f"‚ùå Could not get user info: {e}")

def example_scheduled_commenting():
    """Example: Set up scheduled commenting"""
    print("="*60)
    print("EXAMPLE: SCHEDULED COMMENTING")
    print("="*60)
    
    bot = RedditBot()
    
    print("‚è∞ Setting up scheduled auto-commenting...")
    print("üìÖ Schedule: Every 6 hours on r/artificial")
    print("üí¨ Max 2 comments per session")
    
    # Schedule auto-commenting
    bot.schedule_auto_commenting(
        subreddit_name="artificial",
        interval_hours=6,
        max_comments=2
    )
    
    print("‚úÖ Scheduled task created!")
    print("üí° To run the scheduler, call bot.run_scheduler()")
    print("‚ö†Ô∏è  Note: This would run indefinitely - stopped for demo")

def run_all_examples():
    """Run all examples in sequence"""
    print("üöÄ REDDIT BOT - COMPREHENSIVE EXAMPLES")
    print("="*60)
    
    examples = [
        ("Data Retrieval", example_data_retrieval),
        ("Search and Analysis", example_search_and_analysis),
        ("Bot Statistics", example_bot_statistics),
        ("Custom Comment Demo", example_custom_comment),
        ("Keyword Monitoring", example_keyword_monitoring),
        ("Scheduled Commenting Setup", example_scheduled_commenting),
        # ("Auto-Commenting", example_auto_commenting),  # Commented out to avoid posting
    ]
    
    for name, func in examples:
        try:
            print(f"\nüîÑ Running: {name}")
            func()
            print(f"‚úÖ Completed: {name}")
            time.sleep(2)  # Brief pause between examples
        except Exception as e:
            print(f"‚ùå Error in {name}: {e}")
        
        input("\nPress Enter to continue to next example...")
    
    print("\nüéâ All examples completed!")

def interactive_example_menu():
    """Interactive menu for running specific examples"""
    examples = {
        "1": ("Data Retrieval", example_data_retrieval),
        "2": ("Search and Analysis", example_search_and_analysis),
        "3": ("Bot Statistics", example_bot_statistics),
        "4": ("Custom Comment Demo", example_custom_comment),
        "5": ("Keyword Monitoring", example_keyword_monitoring),
        "6": ("Scheduled Commenting Setup", example_scheduled_commenting),
        "7": ("Auto-Commenting (POSTS REAL COMMENTS)", example_auto_commenting),
        "8": ("Run All Examples", run_all_examples),
    }
    
    while True:
        print("\n" + "="*60)
        print("REDDIT BOT - EXAMPLE MENU")
        print("="*60)
        
        for key, (name, _) in examples.items():
            print(f"{key}. {name}")
        print("0. Exit")
        
        choice = input("\nSelect an example to run (0-8): ").strip()
        
        if choice == "0":
            print("üëã Goodbye!")
            break
        elif choice in examples:
            name, func = examples[choice]
            try:
                print(f"\nüîÑ Running: {name}")
                func()
                print(f"‚úÖ Completed: {name}")
            except Exception as e:
                print(f"‚ùå Error: {e}")
        else:
            print("‚ùå Invalid choice. Please try again.")
        
        input("\nPress Enter to return to menu...")

if __name__ == "__main__":
    print("ü§ñ Reddit Bot - Example Usage")
    print("Choose how to run examples:")
    print("1. Interactive menu")
    print("2. Run all examples")
    
    choice = input("Enter choice (1/2): ").strip()
    
    if choice == "2":
        run_all_examples()
    else:
        interactive_example_menu()